<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>WebSharper.Forms</name></assembly>
<members>
<member name="M:WebSharper.Forms.View.Through``3(WebSharper.UI.View{WebSharper.Forms.Result{``0}},WebSharper.Forms.Form{``1,``2})">
<summary>
 When the input View is a failure, restrict its error messages
 to those that come directly from the given Form.
</summary>
</member>
<member name="M:WebSharper.Forms.View.Through``2(WebSharper.UI.View{WebSharper.Forms.Result{``0}},WebSharper.UI.Var{``1})">
<summary>
 When the input View is a failure, restrict its error messages
 to those that come directly from the given Var.
</summary>
</member>
<member name="M:WebSharper.Forms.View.ShowSuccess``1(WebSharper.UI.View{WebSharper.Forms.Result{``0}},Microsoft.FSharp.Core.FSharpFunc{``0,WebSharper.UI.Doc})">
<summary>
 When the input View is a success, show the given Doc;
 otherwise, show an empty Doc.
</summary>
</member>
<member name="M:WebSharper.Forms.View.ShowErrors``1(WebSharper.UI.View{WebSharper.Forms.Result{``0}},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{WebSharper.Forms.ErrorMessage},WebSharper.UI.Doc})">
<summary>
 When the input View is a failure, show the given Doc;
 otherwise, show an empty Doc.
</summary>
</member>
<member name="M:WebSharper.Forms.Result.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},WebSharper.Forms.Result{``0})">
<summary>
 Pass a result through a function if it is successful.
</summary>
</member>
<member name="M:WebSharper.Forms.Result.IsSuccess``1(WebSharper.Forms.Result{``0})">
<summary>
 Check whether a result is successful.
</summary>
</member>
<member name="M:WebSharper.Forms.Result.IsFailure``1(WebSharper.Forms.Result{``0})">
<summary>
 Check whether a result is failing.
</summary>
</member>
<member name="M:WebSharper.Forms.Result.FailWith``1(System.String,Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 Create a failing result with a single error message.
</summary>
</member>
<member name="M:WebSharper.Forms.Result.Bind``2(Microsoft.FSharp.Core.FSharpFunc{``0,WebSharper.Forms.Result{``1}},WebSharper.Forms.Result{``0})">
<summary>
 Pass a result through a function if it is successful.
</summary>
</member>
<member name="M:WebSharper.Forms.Result.Apply``2(WebSharper.Forms.Result{Microsoft.FSharp.Core.FSharpFunc{``0,``1}},WebSharper.Forms.Result{``0})">
<summary>
 Apply a function result to a value result if both are successful.
</summary>
</member>
<member name="M:WebSharper.Forms.Doc.ShowSuccess``1(WebSharper.UI.View{WebSharper.Forms.Result{``0}},Microsoft.FSharp.Core.FSharpFunc{``0,WebSharper.UI.Doc})">
<summary>
 When the input View is a success, show the given Doc;
 otherwise, show an empty Doc.
</summary>
</member>
<member name="M:WebSharper.Forms.Doc.ShowErrors``1(WebSharper.UI.View{WebSharper.Forms.Result{``0}},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{WebSharper.Forms.ErrorMessage},WebSharper.UI.Doc})">
<summary>
 When the input View is a failure, show the given Doc;
 otherwise, show an empty Doc.
</summary>
</member>
<member name="M:WebSharper.Forms.Doc.ButtonValidate``1(System.String,System.Collections.Generic.IEnumerable{WebSharper.UI.Attr},WebSharper.UI.Submitter{WebSharper.Forms.Result{``0}})">
<summary>
 Create a button that triggers a Submitter when clicked,
 and is disabled when the submitter&apos;s input is a failure.
</summary>
</member>
<member name="M:WebSharper.Forms.Attr.SubmitterValidate``1(WebSharper.UI.Submitter{WebSharper.Forms.Result{``0}})">
<summary>
 Add a click handler that triggers a Submitter,
 and disable the element when the submitter&apos;s input is a failure.
</summary>
</member>
<member name="M:WebSharper.Forms.Pervasives.op_LessMultiplyGreater``5(WebSharper.Forms.Form{Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``2,``3}},WebSharper.Forms.Form{``0,Microsoft.FSharp.Core.FSharpFunc{``3,``4}})">
<summary>
 Apply a Form that returns a function to a Form that returns a value.
</summary>
</member>
<member name="M:WebSharper.Forms.Validation.IsMatch``2(System.String,System.String,WebSharper.Forms.Form{System.String,Microsoft.FSharp.Core.FSharpFunc{``0,``1}})">
<summary>
 If the Form value matches the given regexp, it is passed on;
 else, `Failwith msg` is passed on.
</summary>
</member>
<member name="M:WebSharper.Forms.Validation.IsNotEmpty``2(System.String,WebSharper.Forms.Form{System.String,Microsoft.FSharp.Core.FSharpFunc{``0,``1}})">
<summary>
 If the Form value is not an empty string, it is passed on;
 else, `Failwith msg` is passed on.
</summary>
</member>
<member name="M:WebSharper.Forms.Validation.Is``3(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.String,WebSharper.Forms.Form{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}})">
<summary>
 If the Form value passes the predicate, it is passed on;
 else, `Failwith msg` is passed on.
</summary>
</member>
<member name="T:WebSharper.Forms.Validation">
<summary>
 Functions to validate the value of a Form.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.Builder.Zero``2">
<summary>
 Create a Form that always fails.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.Builder.YieldFrom``3(WebSharper.Forms.Form{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}})">
<summary>
 Return the given Form.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.Builder.Yield``2(``0)">
<summary>
 Create a Form that returns a reactive value,
 initialized to a successful value `init`.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.Builder.ReturnFrom``3(WebSharper.Forms.Form{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}})">
<summary>
 Return the given Form.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.Builder.Return``2(``0)">
<summary>
 Create a Form that always returns the same successful value.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.Builder.Bind``7(WebSharper.Forms.Form{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},Microsoft.FSharp.Core.FSharpFunc{``0,WebSharper.Forms.Form{``3,Microsoft.FSharp.Core.FSharpFunc{``4,``5}}})">
<summary>
 Create a dependent Form where the `dependent` part depends on an `primary` Form.
</summary>
</member>
<member name="P:WebSharper.Forms.Form.Dependent`3.View">
<summary>
 A view on the result of the dependent Form.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.Dependent`3.RenderPrimary(`1)">
<summary>
 Render the primary part of a dependent Form.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.Dependent`3.RenderDependent(`2)">
<summary>
 Render the dependent part of a dependent Form.
</summary>
</member>
<member name="T:WebSharper.Forms.Form.Dependent`3">
<summary>
 Operations applicable to a dependent Form.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.Many``4(System.Collections.Generic.IEnumerable{``0},``0,Microsoft.FSharp.Core.FSharpFunc{``0,WebSharper.Forms.Form{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}})">
<summary>
 Create a Form that returns a collection of values, each created according to the given Form.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.ManyForm``6(System.Collections.Generic.IEnumerable{``0},WebSharper.Forms.Form{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},Microsoft.FSharp.Core.FSharpFunc{``0,WebSharper.Forms.Form{``0,Microsoft.FSharp.Core.FSharpFunc{``3,``4}}})">
<summary>
 Create a Form that returns a collection of values,
 with an additional Form used to insert new values in the collection.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.Dependent``7(WebSharper.Forms.Form{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},Microsoft.FSharp.Core.FSharpFunc{``0,WebSharper.Forms.Form{``3,Microsoft.FSharp.Core.FSharpFunc{``4,``5}}})">
<summary>
 Create a dependent Form where a `dependent` Form depends on the value of a `primary` Form.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.RunResult``3(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Forms.Result{``0},Microsoft.FSharp.Core.Unit},WebSharper.Forms.Form{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}})">
<summary>
 Run a function on all results.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.Run``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},WebSharper.Forms.Form{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}})">
<summary>
 Run a function on all successful results.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.FlushErrors``3(WebSharper.Forms.Form{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}})">
<summary>
 Map any failing result to a failure with no error messages.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.MapRenderArgs``4(``0,WebSharper.Forms.Form{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``2}})">
<summary>
 Map the arguments passed to the render function of a Form.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.MapAsyncResult``4(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Forms.Result{``0},Microsoft.FSharp.Control.FSharpAsync{WebSharper.Forms.Result{``1}}},WebSharper.Forms.Form{``0,Microsoft.FSharp.Core.FSharpFunc{``2,``3}})">
<summary>
 Map the result of a Form asynchronously.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.MapToAsyncResult``4(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Control.FSharpAsync{WebSharper.Forms.Result{``1}}},WebSharper.Forms.Form{``0,Microsoft.FSharp.Core.FSharpFunc{``2,``3}})">
<summary>
 Map the result of a Form asynchronously.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.MapAsync``4(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Control.FSharpAsync{``1}},WebSharper.Forms.Form{``0,Microsoft.FSharp.Core.FSharpFunc{``2,``3}})">
<summary>
 Map the result of a Form asynchronously.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.MapResult``4(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Forms.Result{``0},WebSharper.Forms.Result{``1}},WebSharper.Forms.Form{``0,Microsoft.FSharp.Core.FSharpFunc{``2,``3}})">
<summary>
 Map the result of a Form.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.MapToResult``4(Microsoft.FSharp.Core.FSharpFunc{``0,WebSharper.Forms.Result{``1}},WebSharper.Forms.Form{``0,Microsoft.FSharp.Core.FSharpFunc{``2,``3}})">
<summary>
 Map the result of a Form.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.Map``4(Microsoft.FSharp.Core.FSharpFunc{``0,``1},WebSharper.Forms.Form{``0,Microsoft.FSharp.Core.FSharpFunc{``2,``3}})">
<summary>
 Map the result of a Form.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.TransmitViewMapResult``4(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Forms.Result{``0},``1},WebSharper.Forms.Form{``0,Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{WebSharper.UI.View{``1},``3}}})">
<summary>
 Pass a mapped view on the result of a Form to its render function.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.TransmitViewMap``4(Microsoft.FSharp.Core.FSharpFunc{``0,``1},WebSharper.Forms.Form{``0,Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{WebSharper.UI.View{WebSharper.Forms.Result{``1}},``3}}})">
<summary>
 Pass a mapped view on the result of a Form to its render function.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.TransmitView``3(WebSharper.Forms.Form{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{WebSharper.UI.View{WebSharper.Forms.Result{``0}},``2}}})">
<summary>
 Pass a view on the result of a Form to its render function.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.WithSubmit``3(WebSharper.Forms.Form{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{WebSharper.UI.Submitter{WebSharper.Forms.Result{``0}},``2}}})">
<summary>
 Add a submitter to a Form: the returned Form gets its value from
 the input Form whenever the submitter is triggered.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.Apply``5(WebSharper.Forms.Form{Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``2,``3}},WebSharper.Forms.Form{``0,Microsoft.FSharp.Core.FSharpFunc{``3,``4}})">
<summary>
 Apply a Form that returns a function to a Form that returns a value.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.YieldOption``2(Microsoft.FSharp.Core.FSharpOption{``0},``0)">
<summary>
 Create a Form that returns a reactive optional value,
 initialized to a successful value `init`.

 When the associated Var is `noneValue`, the result value is `None`;
 when it is any other value `x`, the result value is `Some x`.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.YieldFailure``2">
<summary>
 Create a Form that returns a reactive value, initialized to failure.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.YieldVar``2(WebSharper.UI.Var{``0})">
<summary>
 Create a Form that returns a reactive value.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.Yield``2(``0)">
<summary>
 Create a Form that returns a reactive value,
 initialized to a successful value `init`.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.ReturnFailure``2">
<summary>
 Create a Form that always fails.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.Return``2(``0)">
<summary>
 Create a Form that always returns the same successful value.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.GetView``3(WebSharper.Forms.Form{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}})">
<summary>
 Get the view of a Form.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.RenderDependent``3(WebSharper.Forms.Form.Dependent{``0,``1,``2},``2)">
<summary>
 Render the dependent part of a dependent Form.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.RenderPrimary``3(WebSharper.Forms.Form.Dependent{``0,``1,``2},``1)">
<summary>
 Render the primary part of a dependent Form.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.RenderManyAdder``5(WebSharper.Forms.Form.Many.Collection{``0,``1,``2,``3,``4},``3)">
<summary>
 Render the Form that inserts new items into a Collection.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.RenderMany``5(WebSharper.Forms.Form.Many.Collection{``0,``1,``2,``3,``4},Microsoft.FSharp.Core.FSharpFunc{WebSharper.Forms.Form.Many.ItemOperations,``1})">
<summary>
 Render the items of a Collection with the provided rendering function.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.Render``3(``0,WebSharper.Forms.Form{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``2}})">
<summary>
 Render a Form with a render function.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.Create``3(WebSharper.UI.View{WebSharper.Forms.Result{``0}},Microsoft.FSharp.Core.FSharpFunc{``1,``2})">
<summary>
 Create a Form from a view and a render builder.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.Many.CollectionWithDefault`3.Add">
<summary>
 Add an item to the collection set to the default value.
</summary>
</member>
<member name="T:WebSharper.Forms.Form.Many.CollectionWithDefault`3">
<summary>
 Operations applicable to a Form of collections
 with a provided default new value to insert.
</summary>
</member>
<member name="P:WebSharper.Forms.Form.Many.Collection`5.View">
<summary>
 A view on the resulting collection.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.Many.Collection`5.RenderAdder(`3)">
<summary>
 Render the Form that inserts new items into the collection.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.Many.Collection`5.Render(Microsoft.FSharp.Core.FSharpFunc{WebSharper.Forms.Form.Many.ItemOperations,`1})">
<summary>
 Render the item collection inside this Form
 with the provided rendering function.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.Many.Collection`5.Add(`0)">
<summary>
 Stream where new items for the collection are written.
</summary>
</member>
<member name="T:WebSharper.Forms.Form.Many.Collection`5">
<summary>
 Operations applicable to a Form of collections.
</summary>
</member>
<member name="P:WebSharper.Forms.Form.Many.ItemOperations.MoveUp">
<summary>
 Move the current item up one step in the collection.
</summary>
</member>
<member name="P:WebSharper.Forms.Form.Many.ItemOperations.MoveDown">
<summary>
 Move the current item down one step in the collection.
</summary>
</member>
<member name="M:WebSharper.Forms.Form.Many.ItemOperations.Delete">
<summary>
 Delete the current item from the collection.
</summary>
</member>
<member name="T:WebSharper.Forms.Form.Many.ItemOperations">
<summary>
 Operations applicable to an item in a Form of collections.
</summary>
</member>
<member name="T:WebSharper.Forms.Form.Many">
<summary>
 Operations related to Forms of collections.
</summary>
</member>
<member name="T:WebSharper.Forms.Form">
<summary>
 Form constructors and combinators.
</summary>
</member>
</members>
</doc>
